---
title: "[BETA] TBR 1.39c6 Item Library"
format:
  html:
    grid:
      sidebar-width: 50px
      body-width: 1500px
      margin-width: 50px
      gutter-width: 1.5rem
    theme: darkly
date: last-modified
editor: source
embed-resources: true
---

<!-- 
To-do: 
- CSS Theme of the Item Library... 
- Table filters
- Table functionality
- Acquisition
-->

```{css, echo = FALSE}
.dataTable, .dataTables_wrapper .dataTables_info, label {
  color: white;
}

.dataTables_wrapper .dataTables_paginate .paginate_button.current, .dataTables_wrapper .dataTables_paginate .paginate_button.current:hover, .dataTables_wrapper .dataTables_paginate .paginate_button.disabled, .dataTables_wrapper .dataTables_paginate .paginate_button {
  color: white !important;
}

.basic-block {
  display: flex;
  align-items: center;
  justify-content: left;
  flex-direction: row;
}

.basic-block > div {
  padding: 0 0.5em;
}
```

```{r setup}
#| include: false

library(dplyr)
library(jsonlite)
library(DT)
library(tidyr)

# Load in raw data
item.data <- read_json("../the-black-road-rpg/map/war3map.w3t.json")$custom
item.wts.data <- read_json("../the-black-road-rpg/map/war3mapSkin.w3t.json")$custom

unit.data <- read_json("../the-black-road-rpg/map/war3map.w3u.json")$custom
unit.wts.data <- read_json("../the-black-road-rpg/map/war3mapSkin.w3u.json")$custom

wts.data <- read_json("../the-black-road-rpg/map/war3map.wts.json")

icon.data <- read.csv("./data/icons.csv") |> mutate(icon = gsub(".*/(.*)\\.png", "\\1", path))

crafting.lines <- readLines("../the-black-road-rpg/map/src/50-crafting/Initilization.j") |>
  gsub(pattern = "\t", replacement = "")
forging.lines <- readLines("../the-black-road-rpg/map/src/49-Vendors/Forge Craftmen.j") |>
  gsub(pattern = "\t", replacement = "")
regalia.lines <- readLines("../the-black-road-rpg/map/src/49-Vendors/Forge Regalia.j") |>
  gsub(pattern = "\t", replacement = "")

# Construct spline
df <- tibble(
  rawcode = item.data |> names() |> gsub(pattern = "(I...):.*", replacement = "\\1"),
  parentcode = item.data |> names() |> gsub(pattern = "I...:(.*)", replacement = "\\1")
)

unit.df <- tibble(
  rawcode = unit.data |> names() |> gsub(pattern = "(....):.*", replacement = "\\1"),
  parentcode = unit.data |> names() |> gsub(pattern = "....:(.*)", replacement = "\\1")
)

# Update names for item.*
names(item.data) <- df$rawcode
names(item.wts.data) <- df$rawcode

# Update names for unit.*
names(unit.data) <- unit.df$rawcode
names(unit.wts.data) <- unit.df$rawcode

# Update names for wts.data
names(wts.data) <- paste("TRIGSTR", names(wts.data), sep = "_")

# Build fields from regalia.lines ----------------------------------------------
regalia.df <- tibble(
  vendor = "Master Metalsmith Heletes",
  items.sold = grep(pattern = "set generatorID\\[[0-9]+\\] = '.*'", x = regalia.lines, value = TRUE) |>
    gsub(pattern = "^set generatorID\\[[0-9]+\\] = '(.*)'", x = _, replacement = "\\1")
)

# Build fields from crafting.lines ---------------------------------------------
x <- grep(pattern = "set udg_zNewCraftingXPreq\\[[0-9]+\\]=.*", x = crafting.lines, value = TRUE) |>
  gsub(pattern = "^set udg_zNewCraftingXPreq\\[[0-9]+\\]=(.*)", x = _, replacement = "\\1")

crafting.df <- tibble(
  vendor = "",
  items.sold = grep(pattern = "set udg_zNewCraftingItem\\[[0-9]+\\]='.*'", x = crafting.lines, value = TRUE) |>
    gsub(pattern = "^set udg_zNewCraftingItem\\[[0-9]+\\]='(.*)'", x = _, replacement = "\\1"),
  craft.level = x[x != "101"] |> as.numeric(),
  internal.index = grep(pattern = "set udg_zNewCraftingItem\\[[0-9]+\\]='.*'", x = crafting.lines, value = TRUE) |>
    gsub(pattern = "^set udg_zNewCraftingItem\\[([0-9]+)\\]='.*'", x = _, replacement = "\\1") |>
    as.numeric()) |>
  mutate(craft.profession = case_when(between(internal.index, 0, 59) ~ "Weaponsmith",
                                      between(internal.index, 60, 119) ~ "Armorsmith",
                                      between(internal.index, 120, 179) ~ "Alchemist",
                                      between(internal.index, 180, 239) ~ "Goldsmith"),
         vendor = paste(craft.profession, "Level", craft.level))


# Build fields from unit.* -----------------------------------------------------
unit.df$name <- sapply(unit.wts.data, \(x) {
  which_index <- sapply(x, \(y) y$id %in% "unam")

  if (any(which_index)) {
    if (!is.null(wts.data[[x[[which(which_index)]]$value]])) {
      return (wts.data[[x[[which(which_index)]]$value]])
    }
  }

  return (NA)
})

unit.df$items.sold <- sapply(unit.data, \(x) {
  which_index <- sapply(x, \(y) y$id %in% "usei")

  if (any(which_index)) {
    if (!is.null(x[[which(which_index)]]$value)) {
      return (x[[which(which_index)]]$value)
    }
  }

  return (NA_character_)
})

# Filter down to shopkeepers
# This is borked?
unit.df <- unit.df |>
  filter(!is.na(items.sold)) |>
  separate_longer_delim(items.sold, delim = ",")

# Build fields for spline ------------------------------------------------------
df$name <- sapply(item.wts.data, \(x) {
  which_index <- sapply(x, \(y) y$id %in% "unam") |> 
    which()

  if (length(which_index) > 0) {
    a <- gsub(
      "\\|r",
      "</span>",
      wts.data[[x[[which_index]]$value]]
    )
    
    return (ifelse(
      grepl("</span>", a), 
      sub(
        "\\|?c?[A-Za-z0-9]?[A-Za-z0-9]?([A-Za-z0-9][A-Za-z0-9][A-Za-z0-9][A-Za-z0-9][A-Za-z0-9][A-Za-z0-9])",
        "<span style='color: #\\1'>", 
        a
      ), 
      a
    ))
  }
  
  return (NA)
})

df$icon <- sapply(item.wts.data, \(x) {
  which_index <- sapply(x, \(y) y$id %in% "iico") |> 
    which()

  if (length(which_index) > 0) {
    return (gsub(
      "ReplaceableTextures\\\\CommandButtons\\\\(.*)\\.[Bb][Ll][Pp]", 
      "\\1",
      x[[which_index]]$value
    ))
  }
  
  return (NA)
})

df$class <- sapply(item.data, \(x) {
  which_index <- sapply(x, \(y) y$id %in% "icla") |> 
    which()

  if (length(which_index) > 0) {
    return (x[[which_index]]$value)
  }
  
  return (NA)
})

df$level <- sapply(item.data, \(x) {
  which_index <- sapply(x, \(y) y$id %in% "ilev") |> 
    which()

  if (length(which_index) > 0) {
    return (x[[which_index]]$value)
  }
  
  return (NA)
})

df$prio <- sapply(item.data, \(x) {
  which_index <- sapply(x, \(y) y$id %in% "ipri") |> 
    which()

  if (length(which_index) > 0) {
    return (x[[which_index]]$value)
  }
  
  return (NA)
})

df$tooltip <- sapply(item.wts.data, \(x) {
  which_index <- sapply(x, \(y) y$id %in% "utub") |> 
    which()

  if (length(which_index) > 0) {
    a <- sub("(\\|n)*\\|c[A-Za-z0-9][A-Za-z0-9][A-Za-z0-9][A-Za-z0-9][A-Za-z0-9][A-Za-z0-9][A-Za-z0-9][A-Za-z0-9]Requires Level [0-9]*\\|r", "", wts.data[[x[[which_index]]$value]]) |>
      gsub("\\|r", "</span>", x = _) |>
      gsub("\\|n", "<br>", x = _)
    
    b <- ifelse(
      grepl("</span>", a), 
      gsub(
        "\\|c[A-Za-z0-9][A-Za-z0-9]([A-Za-z0-9][A-Za-z0-9][A-Za-z0-9][A-Za-z0-9][A-Za-z0-9][A-Za-z0-9])",
        "<span style='color: #\\1'>",
        a), 
      a
    )
    
    return (sub("(<br>)*<span style='color: #ff0000'>.*</span>", "", x = b) |>
              sub("(<br>)*<span style='color: #fa8072'>.*</span>", "", x = _) |>
              sub("(<br>)*<span style='color: #73C2FB'>.*</span>", "", x = _))
  }
  
  return (NA)
})

df$gold <- sapply(item.data, \(x) {
  which_index <- sapply(x, \(y) y$id %in% "igol") |> 
    which()

  if (length(which_index) > 0) {
    return (x[[which_index]]$value)
  }
  
  return (NA)
})

df$crafting.material <- sapply(item.data, \(x) {
  which_index <- sapply(x, \(y) y$id %in% "ilum") |> 
    which()

  if (length(which_index) > 0) {
    return (x[[which_index]]$value)
  }
  
  return (NA)
})

df$essence <- NA

# Update other tables wrt to df ------------------------------------------------
toMerge <- unit.df |> 
  select(name, items.sold) |>
  rename(vendor = name) |> 
  bind_rows(regalia.df) |>
  bind_rows(crafting.df |> select(vendor, items.sold)) |>
  left_join(df |> select(rawcode, name) |> rename(item.name = name), by = join_by(items.sold == rawcode)) |>
  mutate(forge.flag = grepl("^Forge", item.name),
         item.name = if_else(forge.flag, gsub(pattern = "Forge (.*)", replacement = "\\1", x = item.name), item.name)) |>
  chop(vendor)

forge.item.name.vector <- toMerge |> 
  filter(forge.flag) |>
  pull(item.name)

forge.item.rawcode <- df |>
  select(rawcode, name) |>
  rename(forge.link = rawcode) |>
  filter(name %in% forge.item.name.vector)

toMerge <- toMerge |>
  left_join(forge.item.rawcode, by = join_by(item.name == name)) |>
  mutate(items.sold = if_else(forge.flag, forge.link, items.sold))

toMerge$vendor <- sapply(toMerge$vendor, paste, collapse = "; ")

# Hard-coded updates to item.df ------------------------------------------------

item.df <- df |> mutate(
  class = if_else(is.na(class), case_match(parentcode,
                                           c("kymn", "kybl", "azhr", "sehr", "kygh", "bzbf") ~ "Campaign",
                                           c("rwiz", "evtl", "rlif", "mcou", "penr", "rat6", "pmna", "rde1", "rhth", "bgst", "belv", "cnob", "clsd", "ciri") ~ "Permanent",
                                           c("sreg", "k3m3", "wneg", "phea", "pman", "shea", "spro", "stwp", "shas", "sman") ~ "Purchasable",
                                           c("rnsp", "oslo", "frhg") ~ "Miscellaneous",
                                           c("ckng", "desc") ~ "Artifact",
                                           c("ankh", "pghe", "pgma", "sror", "rej3") ~ "Charged",
                                           c("rres", "gold", "lmbr") ~ "PowerUp"), class),
  name = if_else(is.na(name), case_match(parentcode,
                                         "kymn" ~ "Moon Key",
                                         "cnob" ~ "Circlet of Nobility",
                                         "frhg" ~ "Firehand Gauntlets",
                                         "rres" ~ "Rune of Restoration",
                                         "gold" ~ "Gold Coins"), name),
  prio = if_else(!is.na(prio), case_match(prio,
                                          1 ~ "Forge Dummy",
                                          1001 ~ "Cannot be used by Warrior classes",
                                          1002 ~ "Khaos Champion, Barbarian, Warlord, Assassin only",
                                          1003 ~ "Barbarian Only",
                                          1004 ~ "Warlord Only",
                                          1005 ~ "Temple Guardian Only",
                                          1006 ~ "Ranger Only",
                                          1007 ~ "Khaos Champion Only",
                                          1008 ~ "Cleric only",
                                          1009 ~ "Assassin only",
                                          1010 ~ "Magician only",
                                          1011 ~ "Warlock only",
                                          1012 ~ "Guardian of Nature only",
                                          1013 ~ "Spartan Warrior only",
                                          1014 ~ "Druid only"
                                          ), NA_character_),
  icon = if_else(is.na(icon), case_match(parentcode,
                                         "rlif" ~ "BTNRingSkull",
                                         "belv" ~ "BTNBoots",
                                         "frhg" ~ "BTNAdvancedUnholyStrength",
                                         "pmna" ~ "BTNPendantOfMana",
                                         "cnob" ~ "BTNCirclet",
                                         "penr" ~ "BTNPendantOfEnergy",
                                         "ckng" ~ "BTNHelmutPurple",
                                         "rat6" ~ "BTNClawsOfAttack",
                                         "shas" ~ "BTNScrollOfHaste",
                                         "stwp" ~ "BTNScrollUber",
                                         "ankh" ~ "BTNAnkh",
                                         "sreg" ~ "BTNScrollOfRegenerationGreen",
                                         "phea" ~ "BTNPotionGreenSmall",
                                         "pman" ~ "BTNPotionBlueSmall",
                                         "shea" ~ "BTNScrollOfTownPortal",
                                         "sman" ~ "BTNScrollOfProtection",
                                         "spro" ~ "BTNScroll",
                                         "sror" ~ "BTNSnazzyScrollGreen",
                                         "wneg" ~ "BTNWandSkull",
                                         "pghe" ~ "BTNPotionGreen",
                                         "pgma" ~ "BTNPotionBlueBig",
                                         "oslo" ~ "BTNOrbofSlowness",
                                         "sehr" ~ "BTNHeartOfSearinox",
                                         "bzbf" ~ "BTNVialFull",
                                         "rhth" ~ "BTNPeriapt1",
                                         "k3m3" ~ "BTN3M3",
                                         "rwiz" ~ "BTNSobiMask",
                                         ), icon),
  icon = if_else(icon == "BTNFrostmourne", "BTNFrostMourne", icon),
  level = as.numeric(level),
  level = if_else(is.na(level), case_match(parentcode,
                                            "rlif" ~ 3,
                                            "mcou" ~ 5,
                                            "rej3" ~ 2,
                                            c("kymn", "kybl") ~ 0),
                  level),
  rarity = case_when(grepl("#00ffff", name) ~ "Uncommon",
                     grepl("#fa8072", name) ~ "Consumables",
                     grepl("#ff7700", name) ~ "Rare",
                     grepl("#ffdead", name) ~ "Artifact",
                     grepl("#32cd32", name) ~ "Epic",
                     grepl("#A1045A", name) ~ "Regalia",
                     grepl("#1E90FF", name) ~ "Relic / Olympian Relic",
                     grepl("#73C2FB", name) ~ "Crafting Component / Unique Crafting Component",
                     .default = "Common"),
  name.clean = gsub("(</span>)|(<span style='color: #.*'>)", "", name)) |>
  left_join(y = icon.data, by = join_by(icon)) |>
  left_join(y = toMerge, by = join_by(rawcode == items.sold))
```

```{r display_items}
#| echo: false

item.df |>
  filter(class != "PowerUp",
         class != "Campaign",
         name.clean != "Rune of Restoration",
         !grepl("Tome of Attribute Increase", name.clean),
         name.clean != "Iron Key",
         !rawcode %in% c("I0EX", "I0EY")
         ) |>
  mutate(
    rarity = factor(rarity, levels = c("Common", "Uncommon", "Consumables", "Crafting Component / Unique Crafting Component", "Rare", "Artifact", "Epic", "Relic / Olympian Relic", "Regalia"), ordered = TRUE)) |>
  arrange(rarity, level, name.clean) |>
  select(name, level, tooltip, prio, path, vendor) |>
  mutate(name.aug = paste0(name,
                           if_else(level > 0, paste0("<br><span style='color: #ffcc00;'>Requires Level ", level, "</span>"), ""),
                           if_else(!is.na(prio), paste0("<br><span style='color: #ff0000;'>", prio, "</span>"), "")),
         icon.block = paste0("<img src=\"", path, "\"/>"),
         basic.block = paste0("<div class=\"basic-block\"><div>", icon.block, "</div><div>", name.aug, "</div>")) |>
  select(basic.block, tooltip, vendor) |>
  datatable(
    rownames = FALSE, 
    escape = FALSE, 
    colnames = c("Item", "Description", "Acquisition"),
    options = list(columnDefs = list(list(width = "400px", targets = 0)))
  )
```